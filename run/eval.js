// Generated by CoffeeScript 1.3.1
var compare, default_pattern, global_scope, item, ll, new_scope, run, skip, typeis, _, __, _i, _len,
  __slice = [].slice,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

ll = console.log;

new_scope = function(parent) {
  var obj;
  return obj = {
    pattern: [],
    varable: {},
    parent: parent,
    find_varable: function(str) {
      if (this.varable[str] != null) {
        return this.varable;
      } else if (this.parent != null) {
        return this.parent.find_varable(str);
      } else {
        return skip;
      }
    },
    find_pattern: function() {
      var more;
      more = this.parent != null ? this.parent.find_pattern() : this.pattern;
      return this.pattern.concat(more);
    }
  };
};

global_scope = {
  pattern: [],
  varable: {},
  find_varable: function(str, scope) {
    if (this.varable[str] != null) {
      return this.varable;
    } else {
      return;
    }
  },
  find_pattern: function() {
    return this.pattern;
  }
};

__ = function() {
  var v;
  v = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return v.slice(1);
};

_ = 0;

skip = 'skip while pattern not matching';

default_pattern = __(_, function(arr, scope) {
  var args, find_varable, item, method, result, target, varable, _i, _len, _ref, _ref1;
  if (_ref = arr[1], __indexOf.call('+-*/%'.split(''), _ref) >= 0) {
    varable = arr.shift();
    method = arr.shift();
  } else if (_ref1 = arr[0], __indexOf.call('+-*/%'.split(''), _ref1) >= 0) {
    method = arr.shift();
  } else {
    return skip;
  }
  if (varable != null) {
    find_varable = scope.find_varable(varable);
    if ((target = find_varable) == null) {
      return skip;
    }
    arr.unshift(target[varable]);
  }
  args = [];
  console.log('plus');
  for (_i = 0, _len = arr.length; _i < _len; _i++) {
    item = arr[_i];
    if (Array.isArray(item)) {
      args.push(run(item, scope));
    } else {
      find_varable = scope.find_varable(item);
      if (find_varable == null) {
        return skip;
      }
      args.push(find_varable[item]);
    }
  }
  result = args.reduce(function(x, y) {
    switch (method) {
      case '+':
        return x + y;
      case '-':
        return x - y;
      case '*':
        return x * y;
      case '/':
        return x / y;
      case '%':
        return x % y;
    }
  });
  if (varable != null) {
    target[varable] = result;
  }
  return result;
}, function(arr, scope) {
  var args, copy, find_varable, item, target, value, varable, _i, _len, _ref;
  if ((_ref = arr[1]) !== 'put' && _ref !== '=') {
    return skip;
  }
  if (!(arr.length >= 3)) {
    return skip;
  }
  varable = arr[0];
  args = arr.slice(2);
  copy = [];
  for (_i = 0, _len = args.length; _i < _len; _i++) {
    item = args[_i];
    if (Array.isArray(item)) {
      copy.push(run(item, scope));
    } else {
      find_varable = scope.find_varable(item);
      if (find_varable == null) {
        return skip;
      }
      copy.push(find_varable[item]);
    }
  }
  find_varable = scope.find_varable(varable);
  target = find_varable != null ? find_varable : scope.varable;
  value = copy.length === 1 ? copy[0] : copy;
  return target[varable] = value;
}, function(arr, scope) {
  var args, content, _ref;
  if ((_ref = arr[0]) !== 'echo' && _ref !== 'log') {
    return skip;
  }
  if (!(arr.length >= 2)) {
    return skip;
  }
  args = arr.slice(1);
  content = args.map(function(item) {
    var find_varable;
    if (Array.isArray(item)) {
      return run(item, scope);
    } else {
      find_varable = scope.find_varable(item);
      if (find_varable != null) {
        return find_varable[item];
      } else {
        return '(undefined)';
      }
    }
  });
  output.push(String(content));
  console.log(content);
  return content;
}, function(arr, scope) {
  if (arr.shift() !== 'array') {
    return skip;
  }
  if (!(arr.length > 0)) {
    return skip;
  }
  return arr.map(function(item) {
    var as_number;
    if (Array.isArray(item)) {
      return run(item, scope);
    } else {
      as_number = Number(item);
      if (isNaN(as_number)) {
        return item;
      } else {
        return as_number;
      }
    }
  });
}, function(arr, scope) {
  var as_number, copy, item, _i, _len;
  if (arr.shift() !== 'number') {
    return skip;
  }
  if (!(arr.length > 0)) {
    return skip;
  }
  if (arr.length === 1) {
    if (isNaN(Number(arr[0]))) {
      return skip;
    }
  }
  copy = [];
  for (_i = 0, _len = arr.length; _i < _len; _i++) {
    item = arr[_i];
    if (Array.isArray(item)) {
      run(item, scope);
    } else {
      as_number = Number(item);
      if (isNaN(as_number)) {
        return skip;
      } else {
        copy.push(as_number);
      }
    }
  }
  if (copy.length === 0) {
    return skip;
  } else if (copy.length === 1) {
    return copy[0];
  } else {
    return copy;
  }
}, function(arr, scope) {
  if (arr.shift() !== 'string') {
    return skip;
  }
  if (!(arr.length > 0)) {
    return skip;
  }
  if (arr.length === 1) {
    return String(arr[0]);
  } else {
    return arr.map(function(item) {
      return String(item);
    });
  }
}, function(arr, scope) {
  var copy, item, _i, _len;
  if (arr.shift() !== 'bool') {
    return skip;
  }
  copy = [];
  for (_i = 0, _len = arr.length; _i < _len; _i++) {
    item = arr[_i];
    if (item === 'yes' || item === 'true' || item === 'on' || item === 'ok' || item === 'right') {
      copy.push(true);
    } else if (item === 'no' || item === 'false' || item === 'off' || item === 'wrong') {
      copy.push(false);
    } else {
      return skip;
    }
  }
  if (copy.length === 0) {
    return skip;
  } else if (copy.length === 1) {
    return copy[0];
  } else {
    return copy;
  }
}, function(arr, scope) {
  var action, args, new_pattern, varable;
  if (!(arr.length >= 3)) {
    return skip;
  }
  if (arr[0] === 'pattern') {
    arr.shift();
  } else if (arr[1] === 'pattern') {
    varable = arr.shift();
    arr.shift();
  } else {
    return skip;
  }
  args = arr.shift();
  action = arr;
  new_pattern = function(arr, get_scope) {
    var find_varable, index, item, sub_scope, _i, _j, _len, _len1, _ref;
    if (!(arr.length >= args.length)) {
      return skip;
    }
    sub_scope = new_scope(get_scope);
    for (index = _i = 0, _len = args.length; _i < _len; index = ++_i) {
      item = args[index];
      if (Array.isArray(item)) {
        if (Array.isArray(arr[index])) {
          sub_scope.varable[item] = run(arr[index], get_scope);
        } else {
          find_varable = get_scope.find_varable(arr[index]);
          if (find_varable == null) {
            return skip;
          }
          sub_scope.varable[item] = find_varable[arr[index]];
        }
      } else {
        if (arr[index] !== item) {
          return skip;
        }
      }
    }
    _ref = action.slice(0);
    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
      item = _ref[_j];
      run(item, sub_scope);
    }
    return run(action[action.length - 1], sub_scope);
  };
  scope.pattern.unshift(new_pattern);
  if (varable != null) {
    scope.varable[varable] = new_pattern;
  }
  return new_pattern;
}, function(arr, scope) {
  var copy, item, method, method_tail, result, varable, _i, _len;
  method = arr.shift();
  method_tail = method[method.length - 1];
  method = method.slice(0, -1);
  if (!(method_tail === '?' && (typeis[method] != null))) {
    return skip;
  }
  copy = [];
  for (_i = 0, _len = arr.length; _i < _len; _i++) {
    item = arr[_i];
    if (Array.isArray(item)) {
      result = run(item, scope);
      if (result === skip) {
        return skip;
      }
    } else {
      varable = scope.find_varable(item);
      if (varable != null) {
        result = varable[item];
      } else {
        return skip;
      }
    }
    copy.push(typeis[method](result));
  }
  if (copy.length === 1) {
    return copy[0];
  } else {
    return copy;
  }
}, function(arr, scope) {
  var check, false_action, find_else, item, right, true_action, _i, _j, _len, _len1, _ref, _ref1;
  check = arr.shift();
  if (!(arr.length >= 2)) {
    return skip;
  }
  if (!Array.isArray(check)) {
    return skip;
  }
  if (arr.shift() !== 'then') {
    return skip;
  }
  find_else = arr.indexOf('else');
  if (find_else === -1) {
    true_action = arr;
  } else {
    true_action = arr.slice(0, find_else);
    false_action = arr.slice(find_else + 1);
    if (true_action.length === 0) {
      return skip;
    }
    if (false_action.length === 0) {
      return skip;
    }
  }
  right = run(check, scope);
  if (right) {
    _ref = true_action.slice(0, -1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      run(item, scope);
    }
    return run(true_action[true_action.length - 1], scope);
  } else if (!right) {
    if (false_action != null) {
      _ref1 = false_action.slice(0, -1);
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        item = _ref1[_j];
        run(item, scope);
      }
      return run(false_action[false_action.length - 1], scope);
    } else {
      return false;
    }
  } else {
    return skip;
  }
}, function(arr, scope) {
  var base, copy, find_varable, item, method, _i, _j, _len, _len1;
  if (!(arr.length >= 3)) {
    return skip;
  }
  method = arr.shift();
  if (compare[method] == null) {
    return skip;
  }
  copy = [];
  for (_i = 0, _len = arr.length; _i < _len; _i++) {
    item = arr[_i];
    if (Array.isArray(item)) {
      copy.push(run(item, scope));
    } else {
      find_varable = scope.find_varable(item);
      if (find_varable != null) {
        copy.push(find_varable[item]);
      } else {
        return skip;
      }
    }
  }
  base = copy.shift();
  for (_j = 0, _len1 = copy.length; _j < _len1; _j++) {
    item = copy[_j];
    if (!compare[method](base, item)) {
      return false;
    }
    base = item;
  }
  return true;
});

for (_i = 0, _len = default_pattern.length; _i < _len; _i++) {
  item = default_pattern[_i];
  global_scope.pattern.push(item);
}

typeis = {
  array: Array.isArray,
  number: function(item) {
    return !(isNaN(item));
  },
  bool: function(item) {
    return item === true || item === false;
  },
  string: function(item) {
    return typeof item === 'string';
  }
};

compare = {
  '=': function(x, y) {
    return x === y;
  },
  '>': function(x, y) {
    return x > y;
  },
  '<': function(x, y) {
    return x < y;
  },
  '<=': function(x, y) {
    return x <= y;
  },
  '>=': function(x, y) {
    return x >= y;
  }
};

run = function(arr, scope) {
  var pattern, result, _j, _len1, _ref;
  if (scope == null) {
    scope = global_scope;
  }
  _ref = scope.find_pattern();
  for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
    pattern = _ref[_j];
    result = pattern(arr.concat(), scope);
    if (result !== skip) {
      return result;
    }
  }
  console.log('::::pattern::::\n', arr);
  throw new Error('no pattern found');
};

/*
ll (run ['+', '2', ['/', '3', '3']], global_scope)
ll (run ['var', '=', ['+', '2', '3']], global_scope)
run ['echo', 'var', 'ert'], global_scope
ll run ['array', '2', '3'], global_scope
ll run ['number', '2', ['+', '2', '3'], '4'], global_scope

mk = (str) -> str.split ' '

run (mk 'echo a')
run ['a', 'put', ['number', '3']]
run (mk 'echo a')
run (mk 'a + 30 4')
run (mk 'echo a')
console.log '----------------'
ll (run (mk 'number 2 3 4 4 5'))
ll (run (mk 'string 23_45'))
ll (run ['array?', ['array', '2']])
run (mk 'new put a')
run (mk 'log ss')
# ll (run ['number?', 'a'])
console.log '----------------'
run ['var', 'put', ['number', '3']]
run ['echo', 'var']
console.log '----------------'
run ['pattern', ['ll', ['b'], 'xx', ['c']], ['echo', ['+', '4', '34']]]
run ['ll', 'qq', 'xx', 'ff']
console.log '----------------'
ll (run ['=', ['number', '3'], ['number', '3'], ['number', '3']])
ll global_scope.pattern.length
run [
  'pattern',
  ['f', ['x']],
  [['>', 'x', ['number', '2']],
    'then', ['+',
      ['f', ['-', 'x', ['number', '1']]],
      ['f', ['-', 'x', ['number', '2']]],
    ]
    'else', ['number', '1']
  ]
]
console.log (run ['f', ['number', '3']])
*/

