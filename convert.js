// Generated by CoffeeScript 1.3.1
var add_inputs, available_chars, blank, cancel, control, curse, down, draw, end, enter, esc, home, input, keymap, left, ll, remove, render_curse, right, space, store, tag, up,
  __slice = [].slice,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

tag = function(id) {
  return document.getElementById(id);
};

ll = function() {
  var item, time, v, _i, _len, _results;
  v = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  _results = [];
  for (_i = 0, _len = v.length; _i < _len; _i++) {
    item = v[_i];
    time = new Date().getTime();
    _results.push(console.log(time, item));
  }
  return _results;
};

keymap = '';

available_chars = 'abcdefghijjklmnopqrstuvwxyz';

available_chars += 'ABCDEFGHIJJKLMNOPQRSTUVWXYZ';

available_chars += '1234567890!@#$%^&*()';

available_chars += '~`_-+-[]{}\\|:;"\',.<>/?';

add_inputs = available_chars.split('');

curse = '\t';

render_curse = '<nav>&nbsp;</nav>';

draw = function(arr) {
  var item, str, _i, _len;
  str = '';
  for (_i = 0, _len = arr.length; _i < _len; _i++) {
    item = arr[_i];
    if (Array.isArray(item)) {
      str += draw(item);
    } else if (item === curse) {
      str += render_curse;
    } else {
      item = item.replace(curse, render_curse).replace(/\s/g, '&nbsp;');
      str += "<code>" + item + "</code>";
    }
  }
  return "<div>" + str + "</div>";
};

window.onload = function() {
  var box, refresh;
  box = tag('box');
  window.focus();
  (refresh = function() {
    box.innerHTML = draw(store);
    return console.log('Refreshing :::: ', store);
  })();
  document.onkeypress = function(e) {
    var char;
    char = String.fromCharCode(e.keyCode);
    if (__indexOf.call(add_inputs, char) >= 0) {
      console.log("(" + char + ") in inputs");
      input(char);
      refresh();
    }
    return false;
  };
  return document.onkeydown = function(e) {
    var code;
    code = e.keyCode;
    console.log('keyCode .... ', code);
    if (control['' + code] != null) {
      control['' + code]();
      refresh();
      return false;
    }
  };
};

store = ['45345', '345345', ['44', '5', 'sdfsdfsdf\t', ['444']]];

input = function(char) {
  var recurse;
  recurse = function(arr) {
    var c, coll, copy, item, _i, _j, _len, _len1;
    copy = [];
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      item = arr[_i];
      if (Array.isArray(item)) {
        copy.push(recurse(item));
      } else if (item === curse) {
        copy.push("" + char + curse);
      } else {
        coll = '';
        for (_j = 0, _len1 = item.length; _j < _len1; _j++) {
          c = item[_j];
          if (c === curse) {
            coll += char;
          }
          coll += c;
        }
        copy.push(coll);
      }
    }
    return copy;
  };
  return store = recurse(store);
};

cancel = function() {
  var recurse;
  console.log('called to cancel');
  if (store[0] === curse) {
    return 'nothing to do';
  }
  recurse = function(arr) {
    var c, coll, copy, curse_place, item, _i, _j, _len, _len1;
    if (__indexOf.call(arr, curse) >= 0) {
      if (arr[0] === curse) {
        return curse;
      }
      curse_place = arr.indexOf(curse);
      arr = arr.slice(0, curse_place - 1).concat(arr.slice(curse_place));
      return arr;
    }
    copy = [];
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      item = arr[_i];
      if (Array.isArray(item)) {
        copy.push(recurse(item));
      } else {
        if (item[0] === curse) {
          return curse;
        }
        coll = '';
        for (_j = 0, _len1 = item.length; _j < _len1; _j++) {
          c = item[_j];
          if (c === curse) {
            coll = coll.slice(0, -1);
          }
          coll += c;
        }
        copy.push(coll);
      }
    }
    return copy;
  };
  return store = recurse(store);
};

space = function() {
  var recurse;
  recurse = function(arr) {
    var copy, curse_place, item, _i, _len;
    copy = [];
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      item = arr[_i];
      if (Array.isArray(item)) {
        copy.push(recurse(item));
      } else {
        curse_place = item.indexOf(curse);
        if (curse_place === -1) {
          copy.push(item);
        } else {
          copy.push(item.replace(curse, ''));
          copy.push(curse);
        }
      }
    }
    return copy;
  };
  return store = recurse(store);
};

enter = function() {
  var recurse;
  recurse = function(arr) {
    var copy, curse_place, item, _i, _len;
    if (__indexOf.call(arr, curse) >= 0) {
      return arr.map(function(x) {
        if (x === curse) {
          return [x];
        } else {
          return x;
        }
      });
    }
    copy = [];
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      item = arr[_i];
      if (Array.isArray(item)) {
        copy.push(recurse(item));
      } else {
        curse_place = item.indexOf(curse);
        if (curse_place === -1) {
          copy.push(item);
        } else {
          copy.push(item.replace(curse, ''));
          copy.push([curse]);
        }
      }
    }
    return copy;
  };
  return store = recurse(store);
};

blank = function() {
  return input(' ');
};

esc = function() {
  var recurse;
  if (__indexOf.call(store, curse) >= 0) {
    return 'top level.. dont do enything';
  }
  recurse = function(arr) {
    var copy, curse_place, item, _i, _len;
    copy = [];
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      item = arr[_i];
      if (Array.isArray(item)) {
        if (__indexOf.call(item, curse) >= 0) {
          copy.push(item.filter(function(x) {
            return x !== curse;
          }));
          copy.push(curse);
        } else {
          copy.push(recurse(item));
        }
      } else {
        curse_place = item.indexOf(curse);
        if (curse_place === -1) {
          copy.push(item);
        } else {
          copy.push(item.replace(curse, ''));
          copy.push(curse);
        }
      }
    }
    return copy;
  };
  return store = recurse(store);
};

home = function() {
  var recurse;
  if ((store[0] != null) && store[0] === curse) {
    return 'top level, nothing to do';
  }
  recurse = function(arr) {
    var copy, find_curse, item, _i, _len;
    if (__indexOf.call(arr, curse) >= 0 && (arr[0] !== curse)) {
      return [curse].concat(arr.filter(function(x) {
        return x !== curse;
      }));
    }
    copy = [];
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      item = arr[_i];
      if (item[0] === curse) {
        copy.push(curse, item.slice(1));
      } else {
        if (Array.isArray(item)) {
          copy.push(recurse(item));
        } else {
          find_curse = item.match(new RegExp(curse));
          if (find_curse != null) {
            copy.push("" + curse + (item.replace(curse, '')));
          } else {
            copy.push(item);
          }
        }
      }
    }
    return copy;
  };
  return store = recurse(store);
};

end = function() {
  var reverse;
  reverse = function(arr) {
    var c, coll, copy, item, _i, _j, _len, _len1, _ref, _ref1;
    copy = [];
    _ref = arr.reverse();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      if (Array.isArray(item)) {
        copy.push(reverse(item));
      } else {
        coll = '';
        _ref1 = item.split('').reverse();
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          c = _ref1[_j];
          coll += c;
        }
        copy.push(coll);
      }
    }
    return copy;
  };
  store = reverse(store);
  home();
  return store = reverse(store);
};

remove = function() {
  var recurse;
  if (__indexOf.call(store, curse) >= 0) {
    store = [curse];
    return 'done';
  }
  recurse = function(arr) {
    return arr.map(function(x) {
      if (Array.isArray(x)) {
        if (__indexOf.call(x, curse) >= 0) {
          return curse;
        } else {
          return recurse(x);
        }
      } else {
        if (x.match(new RegExp(curse)) != null) {
          return curse;
        } else {
          return x;
        }
      }
    });
  };
  return store = recurse(store);
};

left = function() {
  return '';
};

right = function() {
  return '';
};

up = function() {
  return '';
};

down = function() {
  return '';
};

/* beyond demo on this page
save = -> ''
import = -> ''
export = -> ''
*/


control = {
  '8': cancel,
  '13': enter,
  '32': space,
  '9': blank,
  '27': esc,
  '37': left,
  '39': right,
  '38': up,
  '40': down,
  '36': home,
  '35': end,
  '46': remove
};
